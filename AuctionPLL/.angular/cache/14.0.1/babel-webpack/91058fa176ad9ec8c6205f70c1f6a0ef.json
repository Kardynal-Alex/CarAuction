{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { CustomEncoder } from '../services/customer-encoder';\nimport { BaseUrl } from '../common/constants/urls';\nimport { CommonConstants } from '../common/constants/common-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../services/local-storage.service\";\nimport * as i3 from \"@auth0/angular-jwt\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient, localStorage, jwtHelper) {\n      this.httpClient = httpClient;\n      this.localStorage = localStorage;\n      this.jwtHelper = jwtHelper;\n      this.apiUrl = BaseUrl.ApiURL + 'account/';\n    }\n\n    login(login) {\n      return this.httpClient.post(this.apiUrl + 'login', login);\n    }\n\n    twoSteplogin(twoFactor) {\n      return this.httpClient.post(this.apiUrl + 'twostepverification', twoFactor);\n    }\n\n    facebookLogin(facebookLogin) {\n      return this.httpClient.post(this.apiUrl + 'facebook/', facebookLogin);\n    }\n\n    googleLogin(googleLogin) {\n      return this.httpClient.post(this.apiUrl + 'google/', googleLogin);\n    }\n\n    logout() {\n      this.localStorage.remove(CommonConstants.JWTToken);\n      return this.httpClient.post(this.apiUrl + 'logout', null);\n    }\n\n    register(register) {\n      return this.httpClient.post(this.apiUrl + 'register', register);\n    }\n\n    getUserById(id) {\n      return this.httpClient.get(this.apiUrl + 'getuserbyid/?id=' + id);\n    }\n\n    confirmEmail(route, token, email) {\n      let params = new HttpParams({\n        encoder: new CustomEncoder()\n      });\n      params = params.append('token', token);\n      params = params.append('email', email);\n      return this.httpClient.get(this.apiUrl + 'emailconfirmation', {\n        params: params\n      });\n    }\n\n    forgotPassword(forgotPassword) {\n      return this.httpClient.post(this.apiUrl + 'forgotpassword', forgotPassword);\n    }\n\n    resetPassword(resetPassword) {\n      return this.httpClient.post(this.apiUrl + 'resetpassword', resetPassword);\n    }\n\n    isAuthenticated() {\n      const token = this.localStorage.get(CommonConstants.JWTToken);\n\n      if (token && !this.jwtHelper.isTokenExpired(token)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    getToken() {\n      var token = this.localStorage.get(CommonConstants.JWTToken)?.split('.')[1];\n      return !!token ? token : null;\n    }\n\n    getPayload() {\n      var token = this.getToken();\n      return !!token ? JSON.parse(window.atob(token)) : null;\n    }\n\n    CheckIfIsAdmin() {\n      var payload = this.getPayload();\n\n      if (payload?.role.toLowerCase() === CommonConstants.Admin) {\n        return true;\n      }\n\n      return false;\n    }\n\n    getUserIdFromToken() {\n      var payload = this.getPayload();\n      return payload?.id ?? null;\n    }\n\n    getUserEmailFromToken() {\n      var payload = this.getPayload();\n      return payload?.email ?? null;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i3.JwtHelperService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}