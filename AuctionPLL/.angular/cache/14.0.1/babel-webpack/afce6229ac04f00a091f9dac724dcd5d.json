{"ast":null,"code":"import { ComponentPortal } from '@angular/cdk/portal';\nimport { AwesomeTooltipComponent } from './tooltip.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/overlay\";\nexport let AwesomeTooltipDirective = /*#__PURE__*/(() => {\n  class AwesomeTooltipDirective {\n    constructor(overlay, overlayPositionBuilder, elementRef) {\n      this.overlay = overlay;\n      this.overlayPositionBuilder = overlayPositionBuilder;\n      this.elementRef = elementRef;\n      this.text = '';\n      this.showToolTip = true;\n    }\n\n    ngOnInit() {\n      if (!this.showToolTip) return;\n      const positionStrategy = this.overlayPositionBuilder.flexibleConnectedTo(this.elementRef).withPositions([{\n        originX: 'center',\n        originY: 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetY: -8\n      }]);\n      this.overlayRef = this.overlay.create({\n        positionStrategy\n      });\n    }\n\n    show() {\n      if (this.overlayRef && !this.overlayRef.hasAttached()) {\n        const tooltipRef = this.overlayRef.attach(new ComponentPortal(AwesomeTooltipComponent));\n        tooltipRef.instance.text = this.text;\n        tooltipRef.instance.contentTemplate = this.contentTemplate;\n      }\n    }\n\n    hide() {\n      this.closeToolTip();\n    }\n\n    ngOnDestroy() {\n      this.closeToolTip();\n    }\n\n    closeToolTip() {\n      if (this.overlayRef) {\n        this.overlayRef.detach();\n      }\n    }\n\n  }\n\n  AwesomeTooltipDirective.ɵfac = function AwesomeTooltipDirective_Factory(t) {\n    return new (t || AwesomeTooltipDirective)(i0.ɵɵdirectiveInject(i1.Overlay), i0.ɵɵdirectiveInject(i1.OverlayPositionBuilder), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  AwesomeTooltipDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AwesomeTooltipDirective,\n    selectors: [[\"\", \"awesomeTooltip\", \"\"]],\n    hostBindings: function AwesomeTooltipDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mouseenter\", function AwesomeTooltipDirective_mouseenter_HostBindingHandler() {\n          return ctx.show();\n        })(\"mouseout\", function AwesomeTooltipDirective_mouseout_HostBindingHandler() {\n          return ctx.hide();\n        });\n      }\n    },\n    inputs: {\n      text: [\"awesomeTooltip\", \"text\"],\n      showToolTip: \"showToolTip\",\n      contentTemplate: \"contentTemplate\"\n    }\n  });\n  return AwesomeTooltipDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}